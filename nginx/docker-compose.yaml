version: '3.8'

services:
  db:
    image: jc21/mariadb-aria:latest
    container_name: npm_db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: npmrootpassword   # Cámbialo por uno fuerte
      MYSQL_DATABASE: npm
      MYSQL_USER: npm
      MYSQL_PASSWORD: npmpassword           # Cámbialo por uno fuerte
    volumes:
      - ./data/mysql:/var/lib/mysql

  npm:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx-proxy-manager1
    restart: unless-stopped
    privileged: true                      # Otorga permisos elevados al contenedor
    depends_on:
      - db
    links:
      - db
    ports:
      - "80:80"   # HTTP
      - "443:443" # HTTPS
      - "81:81"   # Panel de administración
    volumes:
      - ./data/npm:/data
      - ./letsencrypt:/etc/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock   # Acceso al socket Docker del host
      - /:/hostfs:ro                               # Monta el fs del host solo lectura
    environment:
      PUID: 0            # como root
      PGID: 0            # como root
      TZ: Europe/Madrid  # Ajusta según tu zona horaria
      DB_MYSQL_HOST: npm_db   # referenciar al contenedor de base de datos
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: npm
      DB_MYSQL_PASSWORD: npmpassword
      DB_MYSQL_NAME: npm

  admin:
    image: alpine:latest
    container_name: npm_admin
    restart: unless-stopped
    privileged: true
    depends_on:
      - npm
    ports:
      - "2222:22"           # Acceso SSH interno opcional
    volumes:
      - /:/hostfs:rw         # Monta el fs del host lectura-escritura
      - /var/run/docker.sock:/var/run/docker.sock
    entrypoint: ['sh', '-c', "while true; do sleep 3600; done"]

networks:
  default:
    driver: bridge

# Esta configuración usa la red bridge de Docker,
# expone los puertos requeridos y mantiene privilegios elevados
# Para acceder al host desde dentro, montamos / y el socket Docker


# version: '3.8'

# services:
#   db:
#     image: jc21/mariadb-aria:latest
#     container_name: npm_db
#     restart: unless-stopped
#     environment:
#       MYSQL_ROOT_PASSWORD: npmrootpassword   # Cámbialo por uno fuerte
#       MYSQL_DATABASE: npm
#       MYSQL_USER: npm
#       MYSQL_PASSWORD: npmpassword           # Cámbialo por uno fuerte
#     volumes:
#       - ./data/mysql:/var/lib/mysql

#   npm:
#     image: jc21/nginx-proxy-manager:latest
#     container_name: nginx-proxy-manager1
#     restart: unless-stopped
#     privileged: true                      # Otorga permisos elevados al contenedor
#     depends_on:
#       - db
#     links:
#       - db
#     ports:
#       - "80:80"   # HTTP
#       - "443:443" # HTTPS
#       - "81:81"   # Panel de administración
#     volumes:
#       - ./data/npm:/data
#       - ./letsencrypt:/etc/letsencrypt
#       - /var/run/docker.sock:/var/run/docker.sock   # Acceso al socket Docker del host
#       - /:/hostfs:ro                               # Monta el fs del host solo lectura
#     environment:
#       PUID: 0            # como root
#       PGID: 0            # como root
#       TZ: Europe/Madrid  # Ajusta según tu zona horaria
#       DB_MYSQL_HOST: npm_db   # referenciar al contenedor de base de datos
#       DB_MYSQL_PORT: 3306
#       DB_MYSQL_USER: npm
#       DB_MYSQL_PASSWORD: npmpassword
#       DB_MYSQL_NAME: npm

#   admin:
#     image: alpine:latest
#     container_name: npm_admin
#     restart: unless-stopped
#     privileged: true
#     depends_on:
#       - npm
#     ports:
#       - "2222:22"           # Acceso SSH interno opcional
#     volumes:
#       - /:/hostfs:rw         # Monta el fs del host lectura-escritura
#       - /var/run/docker.sock:/var/run/docker.sock
#     entrypoint: ['sh', '-c', "while true; do sleep 3600; done"]

# networks:
#   default:
#     driver: bridge

# # Esta configuración usa la red bridge de Docker,
# # expone los puertos requeridos y mantiene privilegios elevados
# # Para acceder al host desde dentro, montamos / y el socket Docker


# # version: '3.8'

# # services:
# #   db:
# #     image: jc21/mariadb-aria:latest
# #     container_name: npm_db
# #     restart: unless-stopped
# #     environment:
# #       MYSQL_ROOT_PASSWORD: npmrootpassword   # Cámbialo por uno fuerte
# #       MYSQL_DATABASE: npm
# #       MYSQL_USER: npm
# #       MYSQL_PASSWORD: npmpassword           # Cámbialo por uno fuerte
# #     volumes:
# #       - ./data/mysql:/var/lib/mysql

# #   npm:
# #     image: jc21/nginx-proxy-manager:latest
# #     container_name: nginx-proxy-manager1
# #     restart: unless-stopped
# #     privileged: true                      # Otorga permisos elevados al contenedor
# #     depends_on:
# #       - db
# #     ports:
# #       - "80:80"   # HTTP
# #       - "443:443" # HTTPS
# #       - "81:81"   # Panel de administración
# #     volumes:
# #       - ./data/npm:/data
# #       - ./letsencrypt:/etc/letsencrypt
# #       - /var/run/docker.sock:/var/run/docker.sock   # Acceso al socket Docker del host
# #       - /:/hostfs:ro                               # Monta el fs del host solo lectura
# #     environment:
# #       PUID: 0            # como root
# #       PGID: 0            # como root
# #       TZ: Europe/Madrid  # Ajusta según tu zona horaria
# #       DB_MYSQL_HOST: db
# #       DB_MYSQL_PORT: 3306
# #       DB_MYSQL_USER: npm
# #       DB_MYSQL_PASSWORD: npmpassword
# #       DB_MYSQL_NAME: npm

# #   admin:
# #     image: alpine:latest
# #     container_name: npm_admin
# #     restart: unless-stopped
# #     privileged: true
# #     depends_on:
# #       - npm
# #     ports:
# #       - "2222:22"           # Acceso SSH interno opcional
# #     volumes:
# #       - /:/hostfs:rw         # Monta el fs del host lectura-escritura
# #       - /var/run/docker.sock:/var/run/docker.sock
# #     entrypoint: ['sh', '-c', "while true; do sleep 3600; done"]

# # networks:
# #   default:
# #     driver: bridge

# # # Esta configuración usa la red bridge de Docker,
# # # expone los puertos requeridos y mantiene privilegios elevados
# # # Para acceder al host desde dentro, montamos / y el socket Docker


# # # version: '3.8'

# # # services:
# # #   db:
# # #     image: jc21/mariadb-aria:latest
# # #     container_name: npm_db
# # #     restart: unless-stopped
# # #     environment:
# # #       MYSQL_ROOT_PASSWORD: npmrootpassword   # Cámbialo por uno fuerte
# # #       MYSQL_DATABASE: npm
# # #       MYSQL_USER: npm
# # #       MYSQL_PASSWORD: npmpassword           # Cámbialo por uno fuerte
# # #     volumes:
# # #       - ./data/mysql:/var/lib/mysql

# # #   npm:
# # #     image: jc21/nginx-proxy-manager:latest
# # #     container_name: nginx-proxy-manager1
# # #     restart: unless-stopped
# # #     network_mode: "host"                # Usa directamente la red de la VPS
# # #     privileged: true                      # Otorga permisos elevados al contenedor
# # #     depends_on:
# # #       - db
# # #     volumes:
# # #       - ./data/npm:/data
# # #       - ./letsencrypt:/etc/letsencrypt
# # #     environment:
# # #       PUID: 0            # como root
# # #       PGID: 0            # como root
# # #       TZ: Europe/Madrid  # Ajusta según tu zona horaria
# # #       DB_MYSQL_HOST: db
# # #       DB_MYSQL_PORT: 3306
# # #       DB_MYSQL_USER: npm
# # #       DB_MYSQL_PASSWORD: npmpassword
# # #       DB_MYSQL_NAME: npm

# # # # Con esta configuración, npm corre con privilegios, en red de host, 
# # # # y hereda la zona horaria del servidor. 
# # # # No es necesario mapear puertos al usar network_mode: "host".
